# Mini-project Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
player_turn=False
outcome = ""
score = 0

# define globals for cards
SUITS = ['C', 'S', 'H', 'D']
RANKS = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K']
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}
SUIT = ['C', 'S', 'H', 'D']
RANK = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K']

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit+self.rank
    
    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc=(CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.card_list=[]

    def __str__(self):
        # return a string representation of a hand
        string=""
        for  card in self.card_list:
            string=string+str(card.suit)+str(card.rank)+"."
        return string

    def add_card(self,card):
        # add a card object to a hand
        print card
        if in_play==True:
            self.card_list.append(card)
        else:
            self.card_list.insert(0,card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        value=0
        count=0
        for card in self.card_list:
            rank=card.get_rank()
            print "rank"+rank
            value=value+VALUES[rank]
            if rank=='A':
                count=1
        print "Value"+str(value)
        if count==1:
            if value+10 <= 21:
                print "Value"+str(value)
                value=value+10
                return value
            else:
                return value
        else:
            return value 
            print "Value"+str(value)
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        i=0
        for card in self.card_list:
            #print "IN DRAW OF HAND CLASS"+card.suit+card.rank+" "+str(pos[1])
            if pos[1]==200:
                if in_play==True or player_turn==True:
                    canvas.draw_image(card_back,CARD_BACK_CENTER,CARD_BACK_SIZE,[236,249],CARD_BACK_SIZE)
                    i=i+1
                    card.draw(canvas,[200+80*i,pos[1]])
                    
                else:
                    card.draw(canvas,[200+80*i,pos[1]])
            else:
                card.draw(canvas,[200+80*i,pos[1]])
            i=i+1
        
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.suit=SUIT
        self.rank=RANK
        
    def shuffle(self):
        # shuffle the deck 
        # use random.shuffle()
        random.shuffle(self.suit)
        random.shuffle(self.rank)
        
    def deal_card(self):
        # deal a card object from the deck
        self.shuffle()
        card=Card(self.suit[0],self.rank[0])
        print card.suit+card.rank
        return card
        
    
    def __str__(self):
        pass	# return a string representing the deck
    

#list of cards -player and dealer
player=Hand()
dealer=Hand()
deck=Deck()


#define event handlers for buttons
def deal():
    global outcome, in_play,SUITS,RANKS,deck,player,dealer,in_play

    # your code goes here
    outcome=""
    in_play = True
    player=Hand()
    dealer=Hand()
    for i in [1,2]:
        player_card=deck.deal_card()
        player.add_card(player_card)
    dealer_card=deck.deal_card()
    dealer.add_card(dealer_card)
    
    
def hit():
    # replace with your code below
    # if the hand is in play, hit the player
    # if busted, assign a message to outcome, update in_play and score
    global player,RANKS,SUITS,deck,in_play,score,outcome,player_turn
    if in_play==True:
        print "HIT IN PLAY"
        player_turn=True
        player_card=deck.deal_card()
        player.add_card(player_card)
        x=player.get_value()
        print str(x)
        if x>21:
            outcome="You lose"
            in_play=False
            score=score-1
    else:
        outcome=outcome+".Click deal for new game."
       
def stand():
    # replace with your code below
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    # assign a message to outcome, update in_play and score
    global player,dealer,RANKS,SUITS,in_play,deck,score,outcome,player_turn
    if in_play==True:
        player_turn=False
        in_play=False
        dealer_card=deck.deal_card()
        dealer.add_card(dealer_card)
        in_play=True
        value=dealer.get_value()
        print "dealer value"
        print value
        while value<17:
            dealer_card=deck.deal_card()
            dealer.add_card(dealer_card)
            value=dealer.get_value()
        print value
        if value<22:
            if (player.get_value())>value:
                outcome="You win"
                score=score+1
            else:
                outcome="You lose"
                score=score-1
        else:
            outcome="You win"
            score=score+1
        in_play=False
        
    else:
        outcome=outcome+".Click deal for new game."
       

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    global player,dealer,in_play,outcome,score
    canvas.draw_text("BLACKJACK",[200,50],40,"Blue")
   
    #drawing the cards
    player.draw(canvas,[200,400])
    dealer.draw(canvas,[200,200])
    
    #outcome and score
    canvas.draw_text(outcome,[250,100],25,"Red")
    canvas.draw_text("SCORE = "+str(score),[250,150],25,"Red")
    
    
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


